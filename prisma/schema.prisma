// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String    @db.Text
  email     String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  servers   Server[]
  members   Member[]
  channels  Channel[]

  conversationsInitiated DMChannel[]     @relation("owner")
  conversationsRequested DMChannel[]     @relation("recipient")
  DirectMessage          DirectMessage[]
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  servers  Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  VOICE
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages Message[]

  @@index([profileId])
  @@index([serverId])
}

model ServerImage {
  id    String @id @default(uuid())
  image Bytes  @db.ByteA
}

model Message {
  id      String @id @default(uuid())
  content String

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model DMChannel {
  id String @id @default(uuid())

  ownerId String
  owner   Profile @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)

  recipientId   String
  recipient     Profile         @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  DirectMessage DirectMessage[]

  @@unique([ownerId, recipientId])
  @@index([ownerId])
  @@index([recipientId])
}

model DirectMessage {
  id      String @id @default(uuid())
  content String

  fileUrl String? @db.Text

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  dmChannelId String
  dmChannel   DMChannel @relation(fields: [dmChannelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([dmChannelId])
}
